/*
 *
 */
package boundaries;

import daos.Globale;
import daos.RubriqueDAO;
import entities.Rubrique;
//import java.awt.Component;
import java.awt.Rectangle;
import java.sql.*;
import java.util.List;
//import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rayanakel
 */
public class JIFRubriques extends javax.swing.JInternalFrame {

    private Connection icn;
    private DefaultTableModel idtm;

    /**
     * Creates new form JIFRubriques
     */
    public JIFRubriques() {
        initComponents();

        setTitle("CRUD Rubriques");
        setVisible(true);

        jTextFieldId.setText("ID");
        jTextFieldCode.setText("");
        jTextFieldNom.setText("");
        jLabelAlerteCode.setText("");
        jLabelAlerteNom.setText("");

        try {
            icn = Globale.getCnx();
            System.out.println(icn);
            /*
             Recuperation du Model de la jTable
             */
            idtm = (DefaultTableModel) jTableRubriques.getModel();

        } catch (Exception ex) {
            jLabelMessage.setText(ex.getMessage());
        }

        remplirJTable();
    }

    //Affichage des données dans la jTable 
    private void remplirJTable() {

        for (int i = idtm.getRowCount() - 1; i >= 0; i--) {
            idtm.removeRow(i);
        }

        try {
            Object[] tLigne;
            RubriqueDAO dao = new RubriqueDAO(icn);
            List<Rubrique> liste = dao.selectAll();
            for (int i = 0; i < liste.size(); i++) {
                Rubrique rubrique = liste.get(i);
                tLigne = new Object[3];
                tLigne[0] = rubrique.getIdRubrique();
                tLigne[1] = rubrique.getCodeRubrique();
                tLigne[2] = rubrique.getIntituleRubrique();
                idtm.addRow(tLigne);
            }

            jLabelMessage.setText("Chargement réussi !!");

        } catch (Exception ex) {
            jLabelMessage.setText(ex.getMessage());
        }

    }

    //Rafaichissement des TextField
    private void cls() {

        try {
//            Component[] tComposants = getContentPane().getComponents();
//            for (int i = 0; i < tComposants.length; i++) {
//                Object objet = tComposants[i];
//                if (objet.getClass().toString().equals("class javax.swing.JTextField")) {
//                    JTextField composant = (JTextField) objet;
//                    composant.setText("");
//
//                }
//            }
            jTextFieldId.setText("ID");
            jTextFieldCode.setText(null);
            jTextFieldNom.setText(null);
        } catch (Exception e) {
            jLabelMessage.setText(e.getMessage());
        }
    }

    //Mise à "zero" des alertes champs
    private void clslabel() {
        try {
            jLabelAlerteCode.setText(null);
            jLabelAlerteNom.setText(null);
        } catch (Exception e) {

        }
    }

    //Mise en majuscule de la premiere lettre et le reste en minuscule d'une string
    private String maj(String caract) {
        String result = caract;
        String lresult = result.substring(0, 1).toUpperCase() + result.substring(1).toLowerCase();

        return lresult;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRubriques = new javax.swing.JTable();
        jLabelId = new javax.swing.JLabel();
        jLabelCode = new javax.swing.JLabel();
        jLabelNom = new javax.swing.JLabel();
        jTextFieldId = new javax.swing.JTextField();
        jTextFieldCode = new javax.swing.JTextField();
        jTextFieldNom = new javax.swing.JTextField();
        jButtonAjouter = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();
        jLabelMessage = new javax.swing.JLabel();
        jLabelAlerteCode = new javax.swing.JLabel();
        jLabelAlerteNom = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("CRUD Rubriques");

        jTableRubriques.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableRubriques.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Code", "Nom"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableRubriques.setGridColor(new java.awt.Color(0, 0, 0));
        jTableRubriques.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableRubriquesMouseClicked(evt);
            }
        });
        jTableRubriques.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableRubriquesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableRubriques);

        jLabelId.setText("ID");

        jLabelCode.setText("Code");

        jLabelNom.setText("Nom");

        jTextFieldId.setBackground(new java.awt.Color(238, 238, 238));
        jTextFieldId.setForeground(new java.awt.Color(255, 0, 0));
        jTextFieldId.setText("ID");
        jTextFieldId.setBorder(null);

        jButtonAjouter.setText("Ajouter");
        jButtonAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjouterActionPerformed(evt);
            }
        });

        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jLabelMessage.setText("Message");

        jLabelAlerteCode.setForeground(new java.awt.Color(255, 0, 0));
        jLabelAlerteCode.setText("*");
        jLabelAlerteCode.setToolTipText("");

        jLabelAlerteNom.setForeground(new java.awt.Color(255, 0, 0));
        jLabelAlerteNom.setText("*");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonAjouter)
                                .addGap(145, 145, 145)
                                .addComponent(jButtonModifier)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonSupprimer))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelId)
                                            .addComponent(jLabelCode)
                                            .addComponent(jLabelNom))
                                        .addGap(36, 36, 36)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldCode, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(32, 32, 32)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelAlerteCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabelAlerteNom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelMessage)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelId)
                    .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCode)
                    .addComponent(jTextFieldCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAlerteCode))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNom)
                    .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAlerteNom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAjouter)
                    .addComponent(jButtonModifier)
                    .addComponent(jButtonSupprimer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jLabelMessage)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjouterActionPerformed

        int liAffecte;

        //Regex de verification des donnees saisies
        String motifCode = "[A-Z]{2}";
        String motifNom = "[\\D]{5,50}";

        boolean lOK = true;

        //Verification des donnees saisies dans les jTextField
        if (!jTextFieldCode.getText().matches(motifCode)) {
            jLabelAlerteCode.setText("Champs obligatoire, deux caractères en majuscules.");
            jLabelMessage.setText("Erreur de saisie !");
            lOK = false;
        }
        if (!jTextFieldNom.getText().matches(motifNom)) {
            jLabelAlerteNom.setText("Champs obligatoire, cinq mini et cinquante max.");
            jLabelMessage.setText("Erreur de saisie !");
            lOK = false;

        }

        //Si les donnees sont exactes alors on insere dans la BD
        if (lOK) {
            clslabel();
            try {

                //Creation et instanciation d'un objet DAO
                RubriqueDAO dao = new RubriqueDAO(icn);

                // Insert
                Rubrique di = new Rubrique(jTextFieldCode.getText(), maj(jTextFieldNom.getText()));
                liAffecte = dao.insert(di);
                if (liAffecte == 1) {
                    icn.commit();
                    remplirJTable();
                    int liMax = jTableRubriques.getRowCount() - 1;
                    jTableRubriques.getSelectionModel().setSelectionInterval(liMax, liMax);
                    jTableRubriques.scrollRectToVisible(new Rectangle(jTableRubriques.getCellRect(liMax, 0, true)));
                }
                jLabelMessage.setText("Ajout réussi !");

                cls();
                clslabel();
            } catch (SQLException ex) {
                jLabelMessage.setText(ex.getMessage());
            }
        }
    }//GEN-LAST:event_jButtonAjouterActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed

        int liAffecte;

        //Regex de verification des donnees saisies
        String motifCode = "[A-Z]{2}";
        String motifNom = "[\\D]{5,50}";

        boolean lOK = true;

        //Verification des donnees saisies dans les jTextField
        if (!jTextFieldCode.getText().matches(motifCode)) {
            jLabelAlerteCode.setText("Champs obligatoire, deux caractères en majuscules.");
            jLabelMessage.setText("Erreur de saisie !");
            lOK = false;
        }
        if (!jTextFieldNom.getText().matches(motifNom)) {
            jLabelAlerteNom.setText("Champs obligatoire, cinq mini et cinquante max.");
            jLabelMessage.setText("Erreur de saisie !");
            lOK = false;

        }

        //Modification dans la BD si donnees saisies OK
        if (lOK) {
            clslabel();
            try {
                RubriqueDAO dao = new RubriqueDAO(icn);

                // Update
                Rubrique di = new Rubrique(Integer.valueOf(jTextFieldId.getText()), jTextFieldCode.getText(), maj(jTextFieldNom.getText()));
                liAffecte = dao.update(di);
                if (liAffecte == 1) {
                    icn.commit();
                    remplirJTable();
                    cls();
                    clslabel();                   
                }
                jLabelMessage.setText("Rubrique modifiée !");

            } catch (SQLException e) {
                jLabelMessage.setText(e.getMessage());
            }
        }
    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed

        int liAffecte;

        //Verification qu'une ligne est bien selectionnee
        if (jTextFieldCode.getText().isEmpty() || jTextFieldNom.getText().isEmpty()) {

            jLabelMessage.setText("Veuillez sélectionner une ligne.");
        } else {
            try {
                RubriqueDAO dao = new RubriqueDAO(icn);

                // Delete
                Rubrique dd = new Rubrique(Integer.valueOf(jTextFieldId.getText()), jTextFieldCode.getText(), jTextFieldNom.getText());
                liAffecte = dao.delete(dd);
                icn.commit();
                if (liAffecte == 1) {
                    icn.commit();
                    remplirJTable();
                    cls();
                }
                jLabelMessage.setText("Rubrique supprimée !");

            } catch (SQLException e) {
                jLabelMessage.setText(e.getMessage());
            }
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jTableRubriquesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRubriquesMouseClicked

        //Affiche dans les jTextField les donnees de la ligne selectionnee dans la jTable
        int liSelectedRow = this.jTableRubriques.getSelectedRow();

        jTextFieldId.setText(jTableRubriques.getValueAt(liSelectedRow, 0).toString());
        jTextFieldCode.setText(jTableRubriques.getValueAt(liSelectedRow, 1).toString());
        jTextFieldNom.setText(jTableRubriques.getValueAt(liSelectedRow, 2).toString());
    }//GEN-LAST:event_jTableRubriquesMouseClicked

    private void jTableRubriquesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableRubriquesKeyReleased
        //Permet de naviguer dans la jTable avec le clavier
        jTableRubriquesMouseClicked(null);
    }//GEN-LAST:event_jTableRubriquesKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAjouter;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JLabel jLabelAlerteCode;
    private javax.swing.JLabel jLabelAlerteNom;
    private javax.swing.JLabel jLabelCode;
    private javax.swing.JLabel jLabelId;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JLabel jLabelNom;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableRubriques;
    private javax.swing.JTextField jTextFieldCode;
    private javax.swing.JTextField jTextFieldId;
    private javax.swing.JTextField jTextFieldNom;
    // End of variables declaration//GEN-END:variables
}
